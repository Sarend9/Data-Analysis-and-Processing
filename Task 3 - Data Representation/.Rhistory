ylab = "относительная частота")
duration.hst1<-hist(duration,
breaks = boundary,
right = FALSE,
main="Распределение длительности выполнения задачи",
xlab = "длительность, с",
ylab = "относительная частота")
duration.hst1$counts <- duration.hst1$counts/duration
duration.hst1$counts <- duration.hst1$counts/len(duration)
duration.hst1$counts <- duration.hst1$counts/length(duration)
plot(uration.hst1)
plot(duration.hst1)
duration.hst.rel<-hist(duration,
breaks = boundary,
right = FALSE,
freq = FALSE,
main="Распределение длительности выполнения задачи",
xlab = "длительность, с",
ylab = "относительная частота")
# Вопрос 3-4: Один из играющих в боулинг записывал в течение вечера, сколько кеглей он сбивает с первого броска. По этим данным была составлена таблица частот:
bowls.n.freq <- c(1, 3, 8, 13, 11, 12, 2) # вектор частот
bowls.n.freq <- as.table(bowls.n.freq)    # перевод в таблицу частот
bowls.n <- 3:9                            # вектор значений сбитых кеглей
names(bowls.n.freq) <- bowls.n            # присоединяем значения к их частотам
# Исходные данные из примера
bowls.n.freq <- c(2, 3, 5, 4, 3, 2, 2)    # вектор частот
bowls.n.freq <- as.table(bowls.n.freq)    # перевод в таблицу частот
bowls.n <- 0:6                            # вектор значений сбитых кеглей
names(bowls.n.freq) <- bowls.n            # присоединяем з
# Исходные данные (еще одни)
#bowls.n.freq <- c(3, 8, 13, 12, 10, 4)    # вектор частот
#bowls.n.freq <- as.table(bowls.n.freq)    # перевод в таблицу частот
#bowls.n <- 0:5                            # вектор значений сбитых кеглей
#names(bowls.n.freq) <- bowls.n            # присоединяем з
print("Таблица частот:")
print(bowls.n.freq)
cat("\n")
print("Среднее арифметическое μ (по таблице частот):")
cat("\n")
cat("Среднее арифметическое μ:", mean.bowls <- sum(bowls.n * bowls.n.freq) / sum(bowls.n.freq))
cat("\n\n\n")
print("Медиана (по таблице частот):")
cat("\n")
cat("Объем наблюдений:", n <- sum(bowls.n.freq))
cat("\n\n")
cat("Индекс медианы:  " , (i <- (n+1)/2))
cat("\n\n")
cat("Для нахождения медианы составим таблицу накопленных частот:\n")
print(cumsum(bowls.n.freq))  # Таблица накопленных частот
cat("\n")
# Функция «медиана для таблицы частот»:
median.func.freq <- function(x, y)
{
i1<-0
i2<-0
if (y == round(y)) {
for(i1 in x){
i2<-i2+1
if (i1>y){return(as.numeric(names(x[i2])))
break
}
}
} else if(y != round(y)){
for(i1 in x){
i2<-i2+1
if (i1>y){
if ((as.numeric(names(x[i2])))==(as.numeric(names(x[i2-1])))){return(as.numeric(names(x[i2])))
} else {return(sum(as.numeric(names(x[i2])) + as.numeric(names(x[i2-1])))/2)}
break
}
}
}
}
cat("Медиана:", median.bowls <- median.func.freq(cumsum(bowls.n.freq), i))
#График:
plot(bowls.n.freq,
main = "Распределение результатов",
ylim = c(0, max(bowls.n.freq)+1),   # диапазон оси y
xlab = "результат, cбитые кегли",
ylab = "n",
lwd = 10,                # толщина линий увеличена в 12 раз
col = "lightblue")  # голубой цвет столбиков
# Нанесение среднего арифметического (μ) на график:
abline(v=mean.bowls, col = 'red')
text(x = mean.bowls, y = max(bowls.n.freq)-1, 'среднее', col = 'red')
# Нанесение медианы (второй квантиль Q2) на график:
abline(v=median.bowls, col = 'blue')
text(x = median.bowls, y = max(bowls.n.freq)-3, 'медиана', col = 'blue')
# colours()
# Вопрос 3-4: Один из играющих в боулинг записывал в течение вечера, сколько кеглей он сбивает с первого броска. По этим данным была составлена таблица частот:
bowls.n.freq <- c(1, 3, 8, 13, 11, 12, 2) # вектор частот
bowls.n.freq <- as.table(bowls.n.freq)    # перевод в таблицу частот
bowls.n <- 3:9                            # вектор значений сбитых кеглей
names(bowls.n.freq) <- bowls.n            # присоединяем значения к их частотам
# Исходные данные из примера
#bowls.n.freq <- c(2, 3, 5, 4, 3, 2, 2)    # вектор частот
#bowls.n.freq <- as.table(bowls.n.freq)    # перевод в таблицу частот
#bowls.n <- 0:6                            # вектор значений сбитых кеглей
#names(bowls.n.freq) <- bowls.n            # присоединяем з
# Исходные данные (еще одни)
#bowls.n.freq <- c(3, 8, 13, 12, 10, 4)    # вектор частот
#bowls.n.freq <- as.table(bowls.n.freq)    # перевод в таблицу частот
#bowls.n <- 0:5                            # вектор значений сбитых кеглей
#names(bowls.n.freq) <- bowls.n            # присоединяем з
print("Таблица частот:")
print(bowls.n.freq)
cat("\n")
print("Среднее арифметическое μ (по таблице частот):")
cat("\n")
cat("Среднее арифметическое μ:", mean.bowls <- sum(bowls.n * bowls.n.freq) / sum(bowls.n.freq))
cat("\n\n\n")
print("Медиана (по таблице частот):")
cat("\n")
cat("Объем наблюдений:", n <- sum(bowls.n.freq))
cat("\n\n")
cat("Индекс медианы:  " , (i <- (n+1)/2))
cat("\n\n")
cat("Для нахождения медианы составим таблицу накопленных частот:\n")
print(cumsum(bowls.n.freq))  # Таблица накопленных частот
cat("\n")
# Функция «медиана для таблицы частот»:
median.func.freq <- function(x, y)
{
i1<-0
i2<-0
if (y == round(y)) {
for(i1 in x){
i2<-i2+1
if (i1>y){return(as.numeric(names(x[i2])))
break
}
}
} else if(y != round(y)){
for(i1 in x){
i2<-i2+1
if (i1>y){
if ((as.numeric(names(x[i2])))==(as.numeric(names(x[i2-1])))){return(as.numeric(names(x[i2])))
} else {return(sum(as.numeric(names(x[i2])) + as.numeric(names(x[i2-1])))/2)}
break
}
}
}
}
cat("Медиана:", median.bowls <- median.func.freq(cumsum(bowls.n.freq), i))
#График:
plot(bowls.n.freq,
main = "Распределение результатов",
ylim = c(0, max(bowls.n.freq)+1),   # диапазон оси y
xlab = "результат, cбитые кегли",
ylab = "n",
lwd = 10,                # толщина линий увеличена в 12 раз
col = "lightblue")  # голубой цвет столбиков
# Нанесение среднего арифметического (μ) на график:
abline(v=mean.bowls, col = 'red')
text(x = mean.bowls, y = max(bowls.n.freq)-1, 'среднее', col = 'red')
# Нанесение медианы (второй квантиль Q2) на график:
abline(v=median.bowls, col = 'blue')
text(x = median.bowls, y = max(bowls.n.freq)-3, 'медиана', col = 'blue')
# colours()
# Вопрос 3-4: Один из играющих в боулинг записывал в течение вечера, сколько кеглей он сбивает с первого броска. По этим данным была составлена таблица частот:
bowls.n.freq <- c(1, 3, 8, 13, 11, 12, 2) # вектор частот
bowls.n.freq <- as.table(bowls.n.freq)    # перевод в таблицу частот
bowls.n <- 3:9                            # вектор значений сбитых кеглей
names(bowls.n.freq) <- bowls.n            # присоединяем значения к их частотам
# Исходные данные из примера
#bowls.n.freq <- c(2, 3, 5, 4, 3, 2, 2)    # вектор частот
#bowls.n.freq <- as.table(bowls.n.freq)    # перевод в таблицу частот
#bowls.n <- 0:6                            # вектор значений сбитых кеглей
#names(bowls.n.freq) <- bowls.n            # присоединяем з
# Исходные данные (еще одни)
bowls.n.freq <- c(3, 8, 13, 12, 10, 4)    # вектор частот
bowls.n.freq <- as.table(bowls.n.freq)    # перевод в таблицу частот
bowls.n <- 0:5                            # вектор значений сбитых кеглей
names(bowls.n.freq) <- bowls.n            # присоединяем з
print("Таблица частот:")
print(bowls.n.freq)
cat("\n")
print("Среднее арифметическое μ (по таблице частот):")
cat("\n")
cat("Среднее арифметическое μ:", mean.bowls <- sum(bowls.n * bowls.n.freq) / sum(bowls.n.freq))
cat("\n\n\n")
print("Медиана (по таблице частот):")
cat("\n")
cat("Объем наблюдений:", n <- sum(bowls.n.freq))
cat("\n\n")
cat("Индекс медианы:  " , (i <- (n+1)/2))
cat("\n\n")
cat("Для нахождения медианы составим таблицу накопленных частот:\n")
print(cumsum(bowls.n.freq))  # Таблица накопленных частот
cat("\n")
# Функция «медиана для таблицы частот»:
median.func.freq <- function(x, y)
{
i1<-0
i2<-0
if (y == round(y)) {
for(i1 in x){
i2<-i2+1
if (i1>y){return(as.numeric(names(x[i2])))
break
}
}
} else if(y != round(y)){
for(i1 in x){
i2<-i2+1
if (i1>y){
if ((as.numeric(names(x[i2])))==(as.numeric(names(x[i2-1])))){return(as.numeric(names(x[i2])))
} else {return(sum(as.numeric(names(x[i2])) + as.numeric(names(x[i2-1])))/2)}
break
}
}
}
}
cat("Медиана:", median.bowls <- median.func.freq(cumsum(bowls.n.freq), i))
#График:
plot(bowls.n.freq,
main = "Распределение результатов",
ylim = c(0, max(bowls.n.freq)+1),   # диапазон оси y
xlab = "результат, cбитые кегли",
ylab = "n",
lwd = 10,                # толщина линий увеличена в 12 раз
col = "lightblue")  # голубой цвет столбиков
# Нанесение среднего арифметического (μ) на график:
abline(v=mean.bowls, col = 'red')
text(x = mean.bowls, y = max(bowls.n.freq)-1, 'среднее', col = 'red')
# Нанесение медианы (второй квантиль Q2) на график:
abline(v=median.bowls, col = 'blue')
text(x = median.bowls, y = max(bowls.n.freq)-3, 'медиана', col = 'blue')
# colours()
# Вопрос 3-4: Один из играющих в боулинг записывал в течение вечера, сколько кеглей он сбивает с первого броска. По этим данным была составлена таблица частот:
bowls.n.freq <- c(1, 3, 8, 13, 11, 12, 2) # вектор частот
bowls.n.freq <- as.table(bowls.n.freq)    # перевод в таблицу частот
bowls.n <- 3:9                            # вектор значений сбитых кеглей
names(bowls.n.freq) <- bowls.n            # присоединяем значения к их частотам
# Исходные данные из примера
#bowls.n.freq <- c(2, 3, 5, 4, 3, 2, 2)    # вектор частот
#bowls.n.freq <- as.table(bowls.n.freq)    # перевод в таблицу частот
#bowls.n <- 0:6                            # вектор значений сбитых кеглей
#names(bowls.n.freq) <- bowls.n            # присоединяем з
# Исходные данные (еще одни)
bowls.n.freq <- c(3, 8, 13, 12, 10, 4)    # вектор частот
bowls.n.freq <- as.table(bowls.n.freq)    # перевод в таблицу частот
bowls.n <- 0:5                            # вектор значений сбитых кеглей
names(bowls.n.freq) <- bowls.n            # присоединяем з
print("Таблица частот:")
print(bowls.n.freq)
cat("\n")
print("Среднее арифметическое μ (по таблице частот):")
cat("\n")
cat("Среднее арифметическое μ:", mean.bowls <- sum(bowls.n * bowls.n.freq) / sum(bowls.n.freq))
cat("\n\n\n")
print("Медиана (по таблице частот):")
cat("\n")
cat("Объем наблюдений:", n <- sum(bowls.n.freq))
cat("\n\n")
cat("Индекс медианы:  " , (i <- (n+1)/2))
cat("\n\n")
cat("Для нахождения медианы составим таблицу накопленных частот:\n")
print(cumsum(bowls.n.freq))  # Таблица накопленных частот
cat("\n")
# Функция «медиана для таблицы частот»:
median.func.freq <- function(x, y)
{
i1<-0
i2<-0
if (y == round(y)) {
for(i1 in x){
i2<-i2+1
if (i1>y){return(as.numeric(names(x[i2])))
break
}
}
} else if(y != round(y)){
for(i1 in x){
i2<-i2+1
if (i1>y){
if ((as.numeric(names(x[i2])))==(as.numeric(names(x[i2-1])))){return(as.numeric(names(x[i2])))
} else {return(sum(as.numeric(names(x[i2])) + as.numeric(names(x[i2-1])))/2)}
break
}
}
}
}
cat("Медиана:", median.bowls <- median.func.freq(cumsum(bowls.n.freq), i))
#График:
plot(bowls.n.freq,
main = "Распределение результатов",
ylim = c(0, max(bowls.n.freq)+1),   # диапазон оси y
xlab = "результат, cбитые кегли",
ylab = "n",
lwd = 10,                # толщина линий увеличена в 12 раз
col = "lightblue")  # голубой цвет столбиков
# Нанесение среднего арифметического (μ) на график:
abline(v=mean.bowls, col = 'red')
text(x = mean.bowls, y = max(bowls.n.freq)-1, 'среднее', col = 'red')
# Нанесение медианы (второй квантиль Q2) на график:
abline(v=median.bowls, col = 'blue')
text(x = median.bowls, y = max(bowls.n.freq)-3, 'медиана', col = 'blue')
# colours()
source("C:/Users/ak179/OneDrive/Магистратура/2 КУРС/1 СЕМЕСТР/Лекции (2 курс)/Язык R (шпоры и задачи)/Скрипты/Задание 5/Вопрос 3-4.R")
# Создание таблицы
products <- data.frame("id" = seq(1:8),
"price" = c(8000, 3500, 1200, 19000, 5000, 4800, 6700, 9300),
"tax"   = c(300,400,200,500,250,200,550,400))
# Добавление столбца (сумма двух столбцов)
products$total <- (products$price+products$tax)
View(products) #отобразить
products
# Способы анализа данных в R
analiz.dat<-list(
"Basic operation (Базовые операции)"=               list(
"Максимальное значение"                         =  max   (products$price)                        ,
"Минимальное значение"                          =  min   (products$price)                        ,
"Мин. и макс. значения"                         =  range (products$price)                        ,
"Сумма всех элементов"                          =  sum   (products$price)                        ,
"Произведение всех эл."                         =  prod  (products$price)                        ,
"Ранжировка элементов"                          =  rank  (products$price)                        ,
"Mean (Среднее арифметическое)"                 =  mean  (products$price)                        ,
"1-ий Quantile (квантили) 0.25"                 =  quantile(products$price, 0.25)                ,
"2-ий Quantile (Медиана)"                       =  median (products$price)                       ,
"3-ий Quantile (квантили) 0.75"                 =  quantile(products$price, 0.75)                ,
"Variance (Дисперсия)"                          =  var   (products$price)                        , #cov() тоже самое
"Standard deviation (Стандартное отклонение)"   =  sd    (products$price)                        ,
"Correlation matrix (Корреляционная матрица)"   =  round(cor(products),2)                        , # round - округление
"Summary statistics (Сводная статистика)"       =  summary(products)                             )
, #конец Basic
"Filtering data (Фильтрация данных)"=               list(
"№1"     = data.frame(                             products[products$price == max(products$price),]               ),
"№2.1"   = data.frame(                             a1 <- products[products$price>5000,]                           ),
"№2.2"   = data.frame(                             a1[a1$price == min(a1$price),]                                 ),
"№3.1"   = data.frame(                             a2 <- products[products$price>5000 & products$tax<500,]        ),
"№3.2"   =           (                             a3 <- products[products$price>5000 & products$tax<500, 'id']   ))
, #Конец "Filtering
"Grouping Data (Группировка данных)"=               list(
"Тип данных - 'list'"   =                         by(products$price, products$tax, mean)                         ,
"Тип данных - 'matrix'" =                         tapply(products$price, products$tax, mean)            )
) #Конец analiz
analiz.dat
View(analiz.dat) #отобразить
# Visualization
# Plotting
plot(products$id, products$price, xlab=names(products[["id"]]), ylab=names(products[["price"]]))
# Line Graphs
plot(products$id, products$price,
xlab=names(products["id"]),
ylab=names(products["price"]),
type="l",   #соединить точки линиями
col="blue") #цвет графика
# Нанесения дополнительного графика
lines(products$id, products$total, type="l", col="red")
# Bar Charts (Столбчатая диаграмма)
barplot(products$price,
names.arg=rownames(products)
#,horiz = TRUE #Горизонтальное положение
)
# Pie Charts (Круговая диаграмма)
pie(products$id, products$price)
pie(tapply(products$price, products$tax, mean))
# Boxplot  https://www.tidydata.ru/boxplot
boxplot(products$price)
# Histogram (Гистограмма)
hist(products$price)
source("C:/Users/ak179/OneDrive/Магистратура/2 КУРС/1 СЕМЕСТР/Лекции (2 курс)/Язык R (шпоры и задачи)/Скрипты/Задание 4/Вопрос 8-9.R")
# Создание таблицы
products <- data.frame("id" = seq(1:8),
"price" = c(8000, 3500, 1200, 19000, 5000, 4800, 6700, 9300),
"tax"   = c(300,400,200,500,250,200,550,400))
# Добавление столбца (сумма двух столбцов)
products$total <- (products$price+products$tax)
View(products) #отобразить
products
# Способы анализа данных в R
analiz.dat<-list(
"Basic operation (Базовые операции)"=               list(
"Максимальное значение"                         =  max   (products$price)                        ,
"Минимальное значение"                          =  min   (products$price)                        ,
"Мин. и макс. значения"                         =  range (products$price)                        ,
"Сумма всех элементов"                          =  sum   (products$price)                        ,
"Произведение всех эл."                         =  prod  (products$price)                        ,
"Ранжировка элементов"                          =  rank  (products$price)                        ,
"Mean (Среднее арифметическое)"                 =  mean  (products$price)                        ,
"1-ий Quantile (квантили) 0.25"                 =  quantile(products$price, 0.25)                ,
"2-ий Quantile (Медиана)"                       =  median (products$price)                       ,
"3-ий Quantile (квантили) 0.75"                 =  quantile(products$price, 0.75)                ,
"Variance (Дисперсия)"                          =  var   (products$price)                        , #cov() тоже самое
"Standard deviation (Стандартное отклонение)"   =  sd    (products$price)                        ,
"Correlation matrix (Корреляционная матрица)"   =  round(cor(products),2)                        , # round - округление
"Summary statistics (Сводная статистика)"       =  summary(products)                             )
, #конец Basic
"Filtering data (Фильтрация данных)"=               list(
"№1"     = data.frame(                             products[products$price == max(products$price),]               ),
"№2.1"   = data.frame(                             a1 <- products[products$price>5000,]                           ),
"№2.2"   = data.frame(                             a1[a1$price == min(a1$price),]                                 ),
"№3.1"   = data.frame(                             a2 <- products[products$price>5000 & products$tax<500,]        ),
"№3.2"   =           (                             a3 <- products[products$price>5000 & products$tax<500, 'id']   ))
, #Конец "Filtering
"Grouping Data (Группировка данных)"=               list(
"Тип данных - 'list'"   =                         by(products$price, products$tax, mean)                         ,
"Тип данных - 'matrix'" =                         tapply(products$price, products$tax, mean)            )
) #Конец analiz
analiz.dat
View(analiz.dat) #отобразить
# Visualization
# Plotting
plot(products$id, products$price, xlab=names(products[["id"]]), ylab=names(products[["price"]]))
# Line Graphs
plot(products$id, products$price,
xlab=names(products["id"]),
ylab=names(products["price"]),
type="l",   #соединить точки линиями
col="blue") #цвет графика
# Нанесения дополнительного графика
lines(products$id, products$total, type="l", col="red")
# Bar Charts (Столбчатая диаграмма)
barplot(products$price,
names.arg=rownames(products)
#,horiz = TRUE #Горизонтальное положение
)
# Pie Charts (Круговая диаграмма)
pie(products$id, products$price)
pie(tapply(products$price, products$tax, mean))
# Boxplot  https://www.tidydata.ru/boxplot
boxplot(products$price)
# Histogram (Гистограмма)
hist(products$price)
products$price
sort(boxplot(products$price))
boxplot(sort(products$price))
boxplot(sort(products$price))
sort(products$price)
boxplot(sort(products$price), horizontal = TRUE)
max(products$price)
min(products$price)
boxplot(products$price, horiz = TRUE)
boxplot(products$price, horiz = TRUE)
boxplot(products$price, horizontal = TRUE)
a3 <- boxplot(products$price, horizontal = TRUE)
a3
# Создание таблицы
products <- data.frame("id" = seq(1:8),
"price" = c(8000, 3500, 1200, 19000, 5000, 4800, 6700, 9300),
"tax"   = c(300,400,200,500,250,200,550,400))
# Добавление столбца (сумма двух столбцов)
products$total <- (products$price+products$tax)
View(products) #отобразить
products
# Способы анализа данных в R
analiz.dat<-list(
"Basic operation (Базовые операции)"=               list(
"Максимальное значение"                         =  max   (products$price)                        ,
"Минимальное значение"                          =  min   (products$price)                        ,
"Мин. и макс. значения"                         =  range (products$price)                        ,
"Сумма всех элементов"                          =  sum   (products$price)                        ,
"Произведение всех эл."                         =  prod  (products$price)                        ,
"Ранжировка элементов"                          =  rank  (products$price)                        ,
"Mean (Среднее арифметическое)"                 =  mean  (products$price)                        ,
"1-ий Quantile (квантили) 0.25"                 =  quantile(products$price, 0.25)                ,
"2-ий Quantile (Медиана)"                       =  median (products$price)                       ,
"3-ий Quantile (квантили) 0.75"                 =  quantile(products$price, 0.75)                ,
"Variance (Дисперсия)"                          =  var   (products$price)                        , #cov() тоже самое
"Standard deviation (Стандартное отклонение)"   =  sd    (products$price)                        ,
"Correlation matrix (Корреляционная матрица)"   =  round(cor(products),2)                        , # round - округление
"Summary statistics (Сводная статистика)"       =  summary(products)                             )
, #конец Basic
"Filtering data (Фильтрация данных)"=               list(
"№1"     = data.frame(                             products[products$price == max(products$price),]               ),
"№2.1"   = data.frame(                             a1 <- products[products$price>5000,]                           ),
"№2.2"   = data.frame(                             a1[a1$price == min(a1$price),]                                 ),
"№3.1"   = data.frame(                             a2 <- products[products$price>5000 & products$tax<500,]        ),
"№3.2"   =           (                             a3 <- products[products$price>5000 & products$tax<500, 'id']   ))
, #Конец "Filtering
"Grouping Data (Группировка данных)"=               list(
"Тип данных - 'list'"   =                         by(products$price, products$tax, mean)                         ,
"Тип данных - 'matrix'" =                         tapply(products$price, products$tax, mean)            )
) #Конец analiz
analiz.dat
View(analiz.dat) #отобразить
# Visualization
# Plotting
a.plot1<-plot(products$id, products$price, xlab=names(products[["id"]]), ylab=names(products[["price"]]))
# Line Graphs
a.plot2<-plot(products$id, products$price,
xlab=names(products["id"]),
ylab=names(products["price"]),
type="l",   #соединить точки линиями
col="blue") #цвет графика
# Нанесения дополнительного графика
a.lines<-lines(products$id, products$total, type="l", col="red")
# Bar Charts (Столбчатая диаграмма)
a.barplot<-barplot(products$price,
names.arg=rownames(products)
#,horiz = TRUE #Горизонтальное положение
)
# Pie Charts (Круговая диаграмма)
a.pie1<-pie(products$id, products$price)
a.pie2<-pie(tapply(products$price, products$tax, mean))
# Boxplot  https://www.tidydata.ru/boxplot
a.boxplot<-boxplot(products$price, horizontal = TRUE)
# Histogram (Гистограмма)
a.hist<-hist(products$price)
a.boxplot
a3
source("C:/Users/ak179/OneDrive/Магистратура/2 КУРС/1 СЕМЕСТР/Лекции (2 курс)/Язык R (шпоры и задачи)/Скрипты/Код для развлечения.R")
analiz.dat[["Grouping Data (графики)"]][["Line Graphs (Линейный график) -"]]
View(a.barplot)
analiz.dat[["Grouping Data (графики)"]][["Line Graphs (Линейный график) -"]]
analiz.dat[["Grouping Data (графики)"]][["Bar Charts (Столбчатая диаграмма)"]]
a.plot2<-plot(products$id, products$price,
xlab=names(products["id"]),
ylab=names(products["price"]),
type="l",   #соединить точки линиями
col="blue") #цвет графика
